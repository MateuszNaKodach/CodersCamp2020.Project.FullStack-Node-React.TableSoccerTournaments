openapi: 3.0.1
info:
  title: Table Soccer Tournamtes REST API
  description: REST API for supporting organizators of table soccer tournaments
  version: 0.1.0
servers:
  - url: /rest-api
    description: REST API v1
tags:
  - name: Tournament Registrations
    description: Open/Closing registrations for tournament
  - name: Players profiles
    description: Save and get players profiles
  - name: Doubles Tournament
    description: Get doubles tournament teams
  - name: Tournament Tables
    description: Assign and get list of tournament tables 
  - name: Match
    description: Start/End match
  - name: Specification
    description: The Open API specification
paths:
  /matches/{matchId}/result:
    post:
      tags:
        - Match
      description: End match
      parameters:
        - name: matchId
          in: path
          description: Match Id
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#components/schemas/PostEndMatchRequestBody'
      responses:
        200:
          description: Match successfully ended
  /matches/{matchId}:
    get:
      tags:
        - Match
      description: Fetch match with given id
      parameters:
        - name: matchId
          in: path
          description: Match Id
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      responses:
        200:
          description: Match with given id
          content:
            application/json:
              schema:
                $ref: '#components/schemas/MatchDto'
  /matches:
    post:
      tags:
        - Match
      description: Start match
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#components/schemas/PostStartMatchRequestBody'
      responses:
        200:
          description: Match successfully started
  /tournament-registrations:
    get:
      tags:
        - Tournament Registrations
      description: Fetch list of all torunament registrations
      responses:
        200:
          description: All existing tournament registrations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentRegistrationsListDto'
    post:
      tags:
        - Tournament Registrations
      description: Open new tournament registrations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTournamentRegistrationsRequestBody'
      responses:
        201:
          description: Tournament registrations successfully opened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTournamentRegistrationsResponseBody'
  /tournament-registrations/{tournamentId}:
    get:
      tags:
        - Tournament Registrations
      description: Fetch list of all torunament registrations
      parameters:
        - name: tournamentId
          in: path
          description: Tournament ID
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      responses:
        200:
          description: Tournament Registrations with for requested tournament
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentRegistrationsDto'
  /tournament-registrations/{tournamentId}/close:
    post:
      tags:
        - Tournament Registrations
      description: Close tournament registrations
      parameters:
        - name: tournamentId
          in: path
          description: Tournament ID
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      responses:
        200:
          description: Tournament registrations was successfully closed
  /tournament-registrations/{tournamentId}/players:
    post:
      tags:
        - Tournament Registrations
      description: Register player for participation in the tournament
      parameters:
        - name: tournamentId
          in: path
          description: Tournament ID
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRegisterPlayerForTournamentRequestBody'
      responses:
        200:
          description: Player successfully registered for the tournament
  /players-profiles:
    post:
      tags:
        - Players profiles
      description: Create new player profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPlayerProfileRequestBody'
      responses:
        200:
          description: Player profile successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPlayerProfileResponseBody'
    get:
      tags:
        - Players profiles
      description: Fetch list of all players profiles
      responses:
        200:
          description: All existing players profiles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerProfilesListDto'
  /players-profiles/{playerdId}:
    get:
      tags:
        - Players profiles
      description: Get player profile under given Player ID
      parameters:
        - name: playerdId
          in: path
          description: Player ID
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      responses:
        200:
          description: Player profile for requested player ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerProfileDto'
  /doubles-tournaments/{tournamentId}/teams:
    get:
      tags:
        - Doubles Tournament
      description: Fetch list of all torunament teams
      parameters:
        - name: tournamentId
          in: path
          description: Tournament ID
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      responses:
        200:
          description: Tournament teams for requested tournament
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentRegistrationsListDto'
  /tournaments/{tournamentId}/tables:
    post:
      tags:
        - Tournament Tables
      description: Assign tables to the tournament
      parameters:
        - name: tournamentId
          in: path
          description: Tournament ID
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAssignTournamentTablesRequestBody'
      responses:
        200:
          description: Tables successfully assigned to the tournament
    get:
      tags:
        - Tournament Tables
      description: Fetch list of all tournament tables
      parameters:
        - name: tournamentId
          in: path
          description: Tournament ID
          required: true
          schema:
            type: string
            format: uuid
            example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      responses:
        200:
          description: Tournament tables for requested tournament
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentTablesDto'
components:
  schemas:
    TournamentTeamDto:
      type: object
      properties:
        teamId:
          description: Identifier of the team
          type: string
          format: uuid
          example: 094469cf-6fcc-4947-a5c0-be1e94f54855
        firstTeamPlayer:
          description: First team player
          type: string
          format: uuid
          example: b8c4c924-a9a5-4296-a319-ebdfbadec6ba
        secondTeamPlayer:
          description: Second team player
          type: string
          format: uuid
          example: 3c09dc91-d82c-4226-9801-4430d3aa48ce
    TournamentTeamListDto:
      type: array
      items:
        $ref: '#/components/schemas/TournamentTeamDto'
      uniqueItems: true
    TournamentRegistrationsListDto:
      type: array
      items:
        $ref: '#/components/schemas/TournamentRegistrationsDto'
      uniqueItems: true
    TournamentRegistrationsDto:
      type: object
      properties:
        tournamentId:
          description: Identifier of the tournament
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        status:
          description: status of the tournament registrations
          type: string
          enum:
            - OPENED
            - CLOSED
          example: OPENED
        registeredPlayersIds:
          description: ids of players which registered for the tournament
          type: array
          items:
            type: string
          uniqueItems: true
    PostRegisterPlayerForTournamentRequestBody:
      type: object
      properties:
        playerId:
          description: Identifier of the player
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      required:
        - playerId
    PostTournamentRegistrationsResponseBody:
      type: object
      properties:
        tournamentId:
          description: Identifier of the tournament for which registrations where opened
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      required:
        - tournamentId
    PostTournamentRegistrationsRequestBody:
      type: object
      properties:
        tournamentId:
          description: Identifier of the tournament for which registrations should be opened
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
      required:
        - tournamentId
    PostPlayerProfileRequestBody:
      type: object
      properties:
        playerId:
          description: Identifier of the player profile which should be created
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        emailAddress:
          type: string
    PostPlayerProfileResponseBody:
      type: object
      properties:
        playerId:
          description: Identifier of the player profile which should be created
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        emailAddress:
          type: string
    PostStartMatchRequestBody:
      type: object
      properties:
        matchId:
          description: Identifier of the match that is supposed to start
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        firstMatchSideId:
          description: Identifier of the match first team
          type: string
          format: uuid
          example: 3510fc2c-bbd7-427c-9439-02f76583aef5
        secondMatchSideId:
          description: Identifier of the match second team
          type: string
          format: uuid
          example: 8321fc2c-bbd7-427c-9439-02f76583aef7
      required:
        - tournamentId
        - firstMatchSideId
        - secondMatchSideId
    PostEndMatchRequestBody:
      type: object
      properties:
        winnerId:
          description: Identifier of the winner team
          type: string
          format: uuid
          example: 3510fc2c-bbd7-427c-9439-02f76583aef5
    MatchDto:
      type: object
      properties:
        matchId:
          description: Identifier of the match
          type: string
          format: uuid
          example: 2480fc2c-bbd7-427c-9439-02f76583aef5
        firstMatchSideId:
          description: Identifier of the match first team
          type: string
          format: uuid
          example: 3510fc2c-bbd7-427c-9439-02f76583aef5
        secondMatchSideId:
          description: Identifier of the match second team
          type: string
          format: uuid
          example: 8321fc2c-bbd7-427c-9439-02f76583aef7
        winnerId:
          description: Identifier of the winner team, returned only when match was ended
          type: string
          format: uuid
          example: 3510fc2c-bbd7-427c-9439-02f76583aef5
    PostAssignTournamentTablesRequestBody:
      type: object
      properties:
        tables:
          description: List of tournament tables
          type: array
          items:
            type: object
            properties:
              tableNumber:
                description: Number of the table (1-200)
                type: integer
                minimum: 1
                maximum: 200
                example: 1
              tableName:
                description: Name of the table
                type: string
              availableToPlay:
                description: Is table available for next match
                type: boolean
          uniqueItems: true
    TournamentTablesDto:
      type: object
      properties:
        tables:
          description: List of tournament tables
          type: array
          items:
            type: object
            properties:
              tableNumber:
                description: Number of the table (1-200)
                type: integer
                example: 1
              tableName:
                description: Name of the table
                type: string
              availableToPlay:
                description: Is table available for next match
                type: boolean
          uniqueItems: true